{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/DABBIE/OneDrive/Desktop/lgu-project-app/src/lib/db.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/DABBIE/OneDrive/Desktop/lgu-project-app/src/app/api/auth/register/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/db'\nimport bcrypt from 'bcryptjs'\nimport { z } from 'zod'\n\nconst registerSchema = z.object({\n  name: z.string().min(1, 'Full name is required'),\n  email: z.string().email('Invalid email address'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n  confirmPassword: z.string()\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n})\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    const validatedData = registerSchema.parse(body)\n\n    // Check if user already exists\n    const existingUser = await prisma.user.findUnique({\n      where: { email: validatedData.email }\n    })\n\n    if (existingUser) {\n      return NextResponse.json({ error: 'User with this email already exists' }, { status: 400 })\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(validatedData.password, 12)\n\n    // Create user\n    const user = await prisma.user.create({\n      data: {\n        name: validatedData.name,\n        email: validatedData.email,\n        password: hashedPassword,\n        role: 'admin'\n      }\n    })\n\n    // Return user without password\n    const { password, ...userWithoutPassword } = user\n\n    return NextResponse.json(userWithoutPassword, { status: 201 })\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return NextResponse.json({ error: 'Validation error', details: error.errors }, { status: 400 })\n    }\n    console.error('Error creating user:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AAAA;;;;;AAEA,MAAM,iBAAiB,mLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9B,MAAM,mLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IACxB,OAAO,mLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,UAAU,mLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,iBAAiB,mLAAA,CAAA,IAAC,CAAC,MAAM;AAC3B,GAAG,MAAM,CAAC,CAAC,OAAS,KAAK,QAAQ,KAAK,KAAK,eAAe,EAAE;IAC1D,SAAS;IACT,MAAM;QAAC;KAAkB;AAC3B;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,gBAAgB,eAAe,KAAK,CAAC;QAE3C,+BAA+B;QAC/B,MAAM,eAAe,MAAM,kHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAChD,OAAO;gBAAE,OAAO,cAAc,KAAK;YAAC;QACtC;QAEA,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsC,GAAG;gBAAE,QAAQ;YAAI;QAC3F;QAEA,gBAAgB;QAChB,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,cAAc,QAAQ,EAAE;QAEjE,cAAc;QACd,MAAM,OAAO,MAAM,kHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpC,MAAM;gBACJ,MAAM,cAAc,IAAI;gBACxB,OAAO,cAAc,KAAK;gBAC1B,UAAU;gBACV,MAAM;YACR;QACF;QAEA,+BAA+B;QAC/B,MAAM,EAAE,QAAQ,EAAE,GAAG,qBAAqB,GAAG;QAE7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,qBAAqB;YAAE,QAAQ;QAAI;IAC9D,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,mLAAA,CAAA,IAAC,CAAC,QAAQ,EAAE;YAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;gBAAoB,SAAS,MAAM,MAAM;YAAC,GAAG;gBAAE,QAAQ;YAAI;QAC/F;QACA,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}